/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  Addressable,
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
} from "../common";

export interface PermissionsInterface extends Interface {
  getEvent(
    nameOrSignatureOrTopic:
      | "AllowTarget"
      | "RevokeTarget"
      | "ScopeAllowFunction"
      | "ScopeFunction"
      | "ScopeFunctionExecutionOptions"
      | "ScopeParameter"
      | "ScopeParameterAsOneOf"
      | "ScopeRevokeFunction"
      | "ScopeTarget"
      | "UnscopeParameter"
  ): EventFragment;
}

export namespace AllowTargetEvent {
  export type InputTuple = [
    role: BigNumberish,
    targetAddress: AddressLike,
    options: BigNumberish
  ];
  export type OutputTuple = [
    role: bigint,
    targetAddress: string,
    options: bigint
  ];
  export interface OutputObject {
    role: bigint;
    targetAddress: string;
    options: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RevokeTargetEvent {
  export type InputTuple = [role: BigNumberish, targetAddress: AddressLike];
  export type OutputTuple = [role: bigint, targetAddress: string];
  export interface OutputObject {
    role: bigint;
    targetAddress: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ScopeAllowFunctionEvent {
  export type InputTuple = [
    role: BigNumberish,
    targetAddress: AddressLike,
    selector: BytesLike,
    options: BigNumberish,
    resultingScopeConfig: BigNumberish
  ];
  export type OutputTuple = [
    role: bigint,
    targetAddress: string,
    selector: string,
    options: bigint,
    resultingScopeConfig: bigint
  ];
  export interface OutputObject {
    role: bigint;
    targetAddress: string;
    selector: string;
    options: bigint;
    resultingScopeConfig: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ScopeFunctionEvent {
  export type InputTuple = [
    role: BigNumberish,
    targetAddress: AddressLike,
    functionSig: BytesLike,
    isParamScoped: boolean[],
    paramType: BigNumberish[],
    paramComp: BigNumberish[],
    compValue: BytesLike[],
    options: BigNumberish,
    resultingScopeConfig: BigNumberish
  ];
  export type OutputTuple = [
    role: bigint,
    targetAddress: string,
    functionSig: string,
    isParamScoped: boolean[],
    paramType: bigint[],
    paramComp: bigint[],
    compValue: string[],
    options: bigint,
    resultingScopeConfig: bigint
  ];
  export interface OutputObject {
    role: bigint;
    targetAddress: string;
    functionSig: string;
    isParamScoped: boolean[];
    paramType: bigint[];
    paramComp: bigint[];
    compValue: string[];
    options: bigint;
    resultingScopeConfig: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ScopeFunctionExecutionOptionsEvent {
  export type InputTuple = [
    role: BigNumberish,
    targetAddress: AddressLike,
    functionSig: BytesLike,
    options: BigNumberish,
    resultingScopeConfig: BigNumberish
  ];
  export type OutputTuple = [
    role: bigint,
    targetAddress: string,
    functionSig: string,
    options: bigint,
    resultingScopeConfig: bigint
  ];
  export interface OutputObject {
    role: bigint;
    targetAddress: string;
    functionSig: string;
    options: bigint;
    resultingScopeConfig: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ScopeParameterEvent {
  export type InputTuple = [
    role: BigNumberish,
    targetAddress: AddressLike,
    functionSig: BytesLike,
    index: BigNumberish,
    paramType: BigNumberish,
    paramComp: BigNumberish,
    compValue: BytesLike,
    resultingScopeConfig: BigNumberish
  ];
  export type OutputTuple = [
    role: bigint,
    targetAddress: string,
    functionSig: string,
    index: bigint,
    paramType: bigint,
    paramComp: bigint,
    compValue: string,
    resultingScopeConfig: bigint
  ];
  export interface OutputObject {
    role: bigint;
    targetAddress: string;
    functionSig: string;
    index: bigint;
    paramType: bigint;
    paramComp: bigint;
    compValue: string;
    resultingScopeConfig: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ScopeParameterAsOneOfEvent {
  export type InputTuple = [
    role: BigNumberish,
    targetAddress: AddressLike,
    functionSig: BytesLike,
    index: BigNumberish,
    paramType: BigNumberish,
    compValues: BytesLike[],
    resultingScopeConfig: BigNumberish
  ];
  export type OutputTuple = [
    role: bigint,
    targetAddress: string,
    functionSig: string,
    index: bigint,
    paramType: bigint,
    compValues: string[],
    resultingScopeConfig: bigint
  ];
  export interface OutputObject {
    role: bigint;
    targetAddress: string;
    functionSig: string;
    index: bigint;
    paramType: bigint;
    compValues: string[];
    resultingScopeConfig: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ScopeRevokeFunctionEvent {
  export type InputTuple = [
    role: BigNumberish,
    targetAddress: AddressLike,
    selector: BytesLike,
    resultingScopeConfig: BigNumberish
  ];
  export type OutputTuple = [
    role: bigint,
    targetAddress: string,
    selector: string,
    resultingScopeConfig: bigint
  ];
  export interface OutputObject {
    role: bigint;
    targetAddress: string;
    selector: string;
    resultingScopeConfig: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ScopeTargetEvent {
  export type InputTuple = [role: BigNumberish, targetAddress: AddressLike];
  export type OutputTuple = [role: bigint, targetAddress: string];
  export interface OutputObject {
    role: bigint;
    targetAddress: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UnscopeParameterEvent {
  export type InputTuple = [
    role: BigNumberish,
    targetAddress: AddressLike,
    functionSig: BytesLike,
    index: BigNumberish,
    resultingScopeConfig: BigNumberish
  ];
  export type OutputTuple = [
    role: bigint,
    targetAddress: string,
    functionSig: string,
    index: bigint,
    resultingScopeConfig: bigint
  ];
  export interface OutputObject {
    role: bigint;
    targetAddress: string;
    functionSig: string;
    index: bigint;
    resultingScopeConfig: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface Permissions extends BaseContract {
  connect(runner?: ContractRunner | null): Permissions;
  attach(target: string | Addressable): Permissions;
  waitForDeployment(): Promise<this>;

  interface: PermissionsInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getEvent(
    key: "AllowTarget"
  ): TypedContractEvent<
    AllowTargetEvent.InputTuple,
    AllowTargetEvent.OutputTuple,
    AllowTargetEvent.OutputObject
  >;
  getEvent(
    key: "RevokeTarget"
  ): TypedContractEvent<
    RevokeTargetEvent.InputTuple,
    RevokeTargetEvent.OutputTuple,
    RevokeTargetEvent.OutputObject
  >;
  getEvent(
    key: "ScopeAllowFunction"
  ): TypedContractEvent<
    ScopeAllowFunctionEvent.InputTuple,
    ScopeAllowFunctionEvent.OutputTuple,
    ScopeAllowFunctionEvent.OutputObject
  >;
  getEvent(
    key: "ScopeFunction"
  ): TypedContractEvent<
    ScopeFunctionEvent.InputTuple,
    ScopeFunctionEvent.OutputTuple,
    ScopeFunctionEvent.OutputObject
  >;
  getEvent(
    key: "ScopeFunctionExecutionOptions"
  ): TypedContractEvent<
    ScopeFunctionExecutionOptionsEvent.InputTuple,
    ScopeFunctionExecutionOptionsEvent.OutputTuple,
    ScopeFunctionExecutionOptionsEvent.OutputObject
  >;
  getEvent(
    key: "ScopeParameter"
  ): TypedContractEvent<
    ScopeParameterEvent.InputTuple,
    ScopeParameterEvent.OutputTuple,
    ScopeParameterEvent.OutputObject
  >;
  getEvent(
    key: "ScopeParameterAsOneOf"
  ): TypedContractEvent<
    ScopeParameterAsOneOfEvent.InputTuple,
    ScopeParameterAsOneOfEvent.OutputTuple,
    ScopeParameterAsOneOfEvent.OutputObject
  >;
  getEvent(
    key: "ScopeRevokeFunction"
  ): TypedContractEvent<
    ScopeRevokeFunctionEvent.InputTuple,
    ScopeRevokeFunctionEvent.OutputTuple,
    ScopeRevokeFunctionEvent.OutputObject
  >;
  getEvent(
    key: "ScopeTarget"
  ): TypedContractEvent<
    ScopeTargetEvent.InputTuple,
    ScopeTargetEvent.OutputTuple,
    ScopeTargetEvent.OutputObject
  >;
  getEvent(
    key: "UnscopeParameter"
  ): TypedContractEvent<
    UnscopeParameterEvent.InputTuple,
    UnscopeParameterEvent.OutputTuple,
    UnscopeParameterEvent.OutputObject
  >;

  filters: {
    "AllowTarget(uint16,address,uint8)": TypedContractEvent<
      AllowTargetEvent.InputTuple,
      AllowTargetEvent.OutputTuple,
      AllowTargetEvent.OutputObject
    >;
    AllowTarget: TypedContractEvent<
      AllowTargetEvent.InputTuple,
      AllowTargetEvent.OutputTuple,
      AllowTargetEvent.OutputObject
    >;

    "RevokeTarget(uint16,address)": TypedContractEvent<
      RevokeTargetEvent.InputTuple,
      RevokeTargetEvent.OutputTuple,
      RevokeTargetEvent.OutputObject
    >;
    RevokeTarget: TypedContractEvent<
      RevokeTargetEvent.InputTuple,
      RevokeTargetEvent.OutputTuple,
      RevokeTargetEvent.OutputObject
    >;

    "ScopeAllowFunction(uint16,address,bytes4,uint8,uint256)": TypedContractEvent<
      ScopeAllowFunctionEvent.InputTuple,
      ScopeAllowFunctionEvent.OutputTuple,
      ScopeAllowFunctionEvent.OutputObject
    >;
    ScopeAllowFunction: TypedContractEvent<
      ScopeAllowFunctionEvent.InputTuple,
      ScopeAllowFunctionEvent.OutputTuple,
      ScopeAllowFunctionEvent.OutputObject
    >;

    "ScopeFunction(uint16,address,bytes4,bool[],uint8[],uint8[],bytes[],uint8,uint256)": TypedContractEvent<
      ScopeFunctionEvent.InputTuple,
      ScopeFunctionEvent.OutputTuple,
      ScopeFunctionEvent.OutputObject
    >;
    ScopeFunction: TypedContractEvent<
      ScopeFunctionEvent.InputTuple,
      ScopeFunctionEvent.OutputTuple,
      ScopeFunctionEvent.OutputObject
    >;

    "ScopeFunctionExecutionOptions(uint16,address,bytes4,uint8,uint256)": TypedContractEvent<
      ScopeFunctionExecutionOptionsEvent.InputTuple,
      ScopeFunctionExecutionOptionsEvent.OutputTuple,
      ScopeFunctionExecutionOptionsEvent.OutputObject
    >;
    ScopeFunctionExecutionOptions: TypedContractEvent<
      ScopeFunctionExecutionOptionsEvent.InputTuple,
      ScopeFunctionExecutionOptionsEvent.OutputTuple,
      ScopeFunctionExecutionOptionsEvent.OutputObject
    >;

    "ScopeParameter(uint16,address,bytes4,uint256,uint8,uint8,bytes,uint256)": TypedContractEvent<
      ScopeParameterEvent.InputTuple,
      ScopeParameterEvent.OutputTuple,
      ScopeParameterEvent.OutputObject
    >;
    ScopeParameter: TypedContractEvent<
      ScopeParameterEvent.InputTuple,
      ScopeParameterEvent.OutputTuple,
      ScopeParameterEvent.OutputObject
    >;

    "ScopeParameterAsOneOf(uint16,address,bytes4,uint256,uint8,bytes[],uint256)": TypedContractEvent<
      ScopeParameterAsOneOfEvent.InputTuple,
      ScopeParameterAsOneOfEvent.OutputTuple,
      ScopeParameterAsOneOfEvent.OutputObject
    >;
    ScopeParameterAsOneOf: TypedContractEvent<
      ScopeParameterAsOneOfEvent.InputTuple,
      ScopeParameterAsOneOfEvent.OutputTuple,
      ScopeParameterAsOneOfEvent.OutputObject
    >;

    "ScopeRevokeFunction(uint16,address,bytes4,uint256)": TypedContractEvent<
      ScopeRevokeFunctionEvent.InputTuple,
      ScopeRevokeFunctionEvent.OutputTuple,
      ScopeRevokeFunctionEvent.OutputObject
    >;
    ScopeRevokeFunction: TypedContractEvent<
      ScopeRevokeFunctionEvent.InputTuple,
      ScopeRevokeFunctionEvent.OutputTuple,
      ScopeRevokeFunctionEvent.OutputObject
    >;

    "ScopeTarget(uint16,address)": TypedContractEvent<
      ScopeTargetEvent.InputTuple,
      ScopeTargetEvent.OutputTuple,
      ScopeTargetEvent.OutputObject
    >;
    ScopeTarget: TypedContractEvent<
      ScopeTargetEvent.InputTuple,
      ScopeTargetEvent.OutputTuple,
      ScopeTargetEvent.OutputObject
    >;

    "UnscopeParameter(uint16,address,bytes4,uint256,uint256)": TypedContractEvent<
      UnscopeParameterEvent.InputTuple,
      UnscopeParameterEvent.OutputTuple,
      UnscopeParameterEvent.OutputObject
    >;
    UnscopeParameter: TypedContractEvent<
      UnscopeParameterEvent.InputTuple,
      UnscopeParameterEvent.OutputTuple,
      UnscopeParameterEvent.OutputObject
    >;
  };
}
