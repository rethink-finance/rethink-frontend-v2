/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  Addressable,
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface TestPluckParamInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "dynamic32DynamicStatic"
      | "dynamic32StaticDynamic"
      | "dynamicDynamic32Static"
      | "dynamicStaticDynamic32"
      | "staticDynamic"
      | "staticDynamic32Dynamic"
      | "staticDynamicDynamic32"
      | "staticFn"
      | "unsupportedFixedSizeAndDynamic"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "Dynamic32"
      | "Dynamic32DynamicStatic"
      | "Dynamic32StaticDynamic"
      | "DynamicDynamic32Static"
      | "DynamicStaticDynamic32"
      | "Static"
      | "StaticDynamic"
      | "StaticDynamic32Dynamic"
      | "StaticDynamicDynamic32"
      | "UnsupportedFixedSizeAndDynamic"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "dynamic32DynamicStatic",
    values: [BytesLike[], string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "dynamic32StaticDynamic",
    values: [AddressLike[], BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "dynamicDynamic32Static",
    values: [string, BigNumberish[], BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "dynamicStaticDynamic32",
    values: [BytesLike, boolean, BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "staticDynamic",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "staticDynamic32Dynamic",
    values: [BigNumberish, BytesLike[], string]
  ): string;
  encodeFunctionData(
    functionFragment: "staticDynamicDynamic32",
    values: [AddressLike, BytesLike, BigNumberish[]]
  ): string;
  encodeFunctionData(functionFragment: "staticFn", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "unsupportedFixedSizeAndDynamic",
    values: [[boolean, boolean], string]
  ): string;

  decodeFunctionResult(
    functionFragment: "dynamic32DynamicStatic",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "dynamic32StaticDynamic",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "dynamicDynamic32Static",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "dynamicStaticDynamic32",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "staticDynamic",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "staticDynamic32Dynamic",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "staticDynamicDynamic32",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "staticFn", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "unsupportedFixedSizeAndDynamic",
    data: BytesLike
  ): Result;
}

export namespace Dynamic32Event {
  export type InputTuple = [first: BigNumberish[]];
  export type OutputTuple = [first: bigint[]];
  export interface OutputObject {
    first: bigint[];
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace Dynamic32DynamicStaticEvent {
  export type InputTuple = [
    first: BytesLike[],
    second: string,
    third: BigNumberish
  ];
  export type OutputTuple = [first: string[], second: string, third: bigint];
  export interface OutputObject {
    first: string[];
    second: string;
    third: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace Dynamic32StaticDynamicEvent {
  export type InputTuple = [
    first: AddressLike[],
    second: BytesLike,
    third: BytesLike
  ];
  export type OutputTuple = [first: string[], second: string, third: string];
  export interface OutputObject {
    first: string[];
    second: string;
    third: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DynamicDynamic32StaticEvent {
  export type InputTuple = [
    first: string,
    second: BigNumberish[],
    third: BigNumberish
  ];
  export type OutputTuple = [first: string, second: bigint[], third: bigint];
  export interface OutputObject {
    first: string;
    second: bigint[];
    third: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DynamicStaticDynamic32Event {
  export type InputTuple = [
    first: BytesLike,
    second: boolean,
    third: BytesLike[]
  ];
  export type OutputTuple = [first: string, second: boolean, third: string[]];
  export interface OutputObject {
    first: string;
    second: boolean;
    third: string[];
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace StaticEvent {
  export type InputTuple = [first: BytesLike];
  export type OutputTuple = [first: string];
  export interface OutputObject {
    first: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace StaticDynamicEvent {
  export type InputTuple = [first: BytesLike, second: string];
  export type OutputTuple = [first: string, second: string];
  export interface OutputObject {
    first: string;
    second: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace StaticDynamic32DynamicEvent {
  export type InputTuple = [
    first: BigNumberish,
    second: BytesLike[],
    third: string
  ];
  export type OutputTuple = [first: bigint, second: string[], third: string];
  export interface OutputObject {
    first: bigint;
    second: string[];
    third: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace StaticDynamicDynamic32Event {
  export type InputTuple = [
    first: AddressLike,
    second: BytesLike,
    third: BigNumberish[]
  ];
  export type OutputTuple = [first: string, second: string, third: bigint[]];
  export interface OutputObject {
    first: string;
    second: string;
    third: bigint[];
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UnsupportedFixedSizeAndDynamicEvent {
  export type InputTuple = [first: [boolean, boolean], second: string];
  export type OutputTuple = [first: [boolean, boolean], second: string];
  export interface OutputObject {
    first: [boolean, boolean];
    second: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface TestPluckParam extends BaseContract {
  connect(runner?: ContractRunner | null): TestPluckParam;
  attach(target: string | Addressable): TestPluckParam;
  waitForDeployment(): Promise<this>;

  interface: TestPluckParamInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  dynamic32DynamicStatic: TypedContractMethod<
    [first: BytesLike[], second: string, third: BigNumberish],
    [void],
    "nonpayable"
  >;

  dynamic32StaticDynamic: TypedContractMethod<
    [first: AddressLike[], second: BytesLike, third: BytesLike],
    [void],
    "nonpayable"
  >;

  dynamicDynamic32Static: TypedContractMethod<
    [first: string, second: BigNumberish[], third: BigNumberish],
    [void],
    "nonpayable"
  >;

  dynamicStaticDynamic32: TypedContractMethod<
    [first: BytesLike, second: boolean, third: BytesLike[]],
    [void],
    "nonpayable"
  >;

  staticDynamic: TypedContractMethod<
    [first: BytesLike, second: string],
    [void],
    "nonpayable"
  >;

  staticDynamic32Dynamic: TypedContractMethod<
    [first: BigNumberish, second: BytesLike[], third: string],
    [void],
    "nonpayable"
  >;

  staticDynamicDynamic32: TypedContractMethod<
    [first: AddressLike, second: BytesLike, third: BigNumberish[]],
    [void],
    "nonpayable"
  >;

  staticFn: TypedContractMethod<[first: BytesLike], [void], "nonpayable">;

  unsupportedFixedSizeAndDynamic: TypedContractMethod<
    [first: [boolean, boolean], second: string],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "dynamic32DynamicStatic"
  ): TypedContractMethod<
    [first: BytesLike[], second: string, third: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "dynamic32StaticDynamic"
  ): TypedContractMethod<
    [first: AddressLike[], second: BytesLike, third: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "dynamicDynamic32Static"
  ): TypedContractMethod<
    [first: string, second: BigNumberish[], third: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "dynamicStaticDynamic32"
  ): TypedContractMethod<
    [first: BytesLike, second: boolean, third: BytesLike[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "staticDynamic"
  ): TypedContractMethod<
    [first: BytesLike, second: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "staticDynamic32Dynamic"
  ): TypedContractMethod<
    [first: BigNumberish, second: BytesLike[], third: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "staticDynamicDynamic32"
  ): TypedContractMethod<
    [first: AddressLike, second: BytesLike, third: BigNumberish[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "staticFn"
  ): TypedContractMethod<[first: BytesLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "unsupportedFixedSizeAndDynamic"
  ): TypedContractMethod<
    [first: [boolean, boolean], second: string],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "Dynamic32"
  ): TypedContractEvent<
    Dynamic32Event.InputTuple,
    Dynamic32Event.OutputTuple,
    Dynamic32Event.OutputObject
  >;
  getEvent(
    key: "Dynamic32DynamicStatic"
  ): TypedContractEvent<
    Dynamic32DynamicStaticEvent.InputTuple,
    Dynamic32DynamicStaticEvent.OutputTuple,
    Dynamic32DynamicStaticEvent.OutputObject
  >;
  getEvent(
    key: "Dynamic32StaticDynamic"
  ): TypedContractEvent<
    Dynamic32StaticDynamicEvent.InputTuple,
    Dynamic32StaticDynamicEvent.OutputTuple,
    Dynamic32StaticDynamicEvent.OutputObject
  >;
  getEvent(
    key: "DynamicDynamic32Static"
  ): TypedContractEvent<
    DynamicDynamic32StaticEvent.InputTuple,
    DynamicDynamic32StaticEvent.OutputTuple,
    DynamicDynamic32StaticEvent.OutputObject
  >;
  getEvent(
    key: "DynamicStaticDynamic32"
  ): TypedContractEvent<
    DynamicStaticDynamic32Event.InputTuple,
    DynamicStaticDynamic32Event.OutputTuple,
    DynamicStaticDynamic32Event.OutputObject
  >;
  getEvent(
    key: "Static"
  ): TypedContractEvent<
    StaticEvent.InputTuple,
    StaticEvent.OutputTuple,
    StaticEvent.OutputObject
  >;
  getEvent(
    key: "StaticDynamic"
  ): TypedContractEvent<
    StaticDynamicEvent.InputTuple,
    StaticDynamicEvent.OutputTuple,
    StaticDynamicEvent.OutputObject
  >;
  getEvent(
    key: "StaticDynamic32Dynamic"
  ): TypedContractEvent<
    StaticDynamic32DynamicEvent.InputTuple,
    StaticDynamic32DynamicEvent.OutputTuple,
    StaticDynamic32DynamicEvent.OutputObject
  >;
  getEvent(
    key: "StaticDynamicDynamic32"
  ): TypedContractEvent<
    StaticDynamicDynamic32Event.InputTuple,
    StaticDynamicDynamic32Event.OutputTuple,
    StaticDynamicDynamic32Event.OutputObject
  >;
  getEvent(
    key: "UnsupportedFixedSizeAndDynamic"
  ): TypedContractEvent<
    UnsupportedFixedSizeAndDynamicEvent.InputTuple,
    UnsupportedFixedSizeAndDynamicEvent.OutputTuple,
    UnsupportedFixedSizeAndDynamicEvent.OutputObject
  >;

  filters: {
    "Dynamic32(uint256[])": TypedContractEvent<
      Dynamic32Event.InputTuple,
      Dynamic32Event.OutputTuple,
      Dynamic32Event.OutputObject
    >;
    Dynamic32: TypedContractEvent<
      Dynamic32Event.InputTuple,
      Dynamic32Event.OutputTuple,
      Dynamic32Event.OutputObject
    >;

    "Dynamic32DynamicStatic(bytes2[],string,uint32)": TypedContractEvent<
      Dynamic32DynamicStaticEvent.InputTuple,
      Dynamic32DynamicStaticEvent.OutputTuple,
      Dynamic32DynamicStaticEvent.OutputObject
    >;
    Dynamic32DynamicStatic: TypedContractEvent<
      Dynamic32DynamicStaticEvent.InputTuple,
      Dynamic32DynamicStaticEvent.OutputTuple,
      Dynamic32DynamicStaticEvent.OutputObject
    >;

    "Dynamic32StaticDynamic(address[],bytes2,bytes)": TypedContractEvent<
      Dynamic32StaticDynamicEvent.InputTuple,
      Dynamic32StaticDynamicEvent.OutputTuple,
      Dynamic32StaticDynamicEvent.OutputObject
    >;
    Dynamic32StaticDynamic: TypedContractEvent<
      Dynamic32StaticDynamicEvent.InputTuple,
      Dynamic32StaticDynamicEvent.OutputTuple,
      Dynamic32StaticDynamicEvent.OutputObject
    >;

    "DynamicDynamic32Static(string,uint32[],uint256)": TypedContractEvent<
      DynamicDynamic32StaticEvent.InputTuple,
      DynamicDynamic32StaticEvent.OutputTuple,
      DynamicDynamic32StaticEvent.OutputObject
    >;
    DynamicDynamic32Static: TypedContractEvent<
      DynamicDynamic32StaticEvent.InputTuple,
      DynamicDynamic32StaticEvent.OutputTuple,
      DynamicDynamic32StaticEvent.OutputObject
    >;

    "DynamicStaticDynamic32(bytes,bool,bytes2[])": TypedContractEvent<
      DynamicStaticDynamic32Event.InputTuple,
      DynamicStaticDynamic32Event.OutputTuple,
      DynamicStaticDynamic32Event.OutputObject
    >;
    DynamicStaticDynamic32: TypedContractEvent<
      DynamicStaticDynamic32Event.InputTuple,
      DynamicStaticDynamic32Event.OutputTuple,
      DynamicStaticDynamic32Event.OutputObject
    >;

    "Static(bytes4)": TypedContractEvent<
      StaticEvent.InputTuple,
      StaticEvent.OutputTuple,
      StaticEvent.OutputObject
    >;
    Static: TypedContractEvent<
      StaticEvent.InputTuple,
      StaticEvent.OutputTuple,
      StaticEvent.OutputObject
    >;

    "StaticDynamic(bytes4,string)": TypedContractEvent<
      StaticDynamicEvent.InputTuple,
      StaticDynamicEvent.OutputTuple,
      StaticDynamicEvent.OutputObject
    >;
    StaticDynamic: TypedContractEvent<
      StaticDynamicEvent.InputTuple,
      StaticDynamicEvent.OutputTuple,
      StaticDynamicEvent.OutputObject
    >;

    "StaticDynamic32Dynamic(uint32,bytes4[],string)": TypedContractEvent<
      StaticDynamic32DynamicEvent.InputTuple,
      StaticDynamic32DynamicEvent.OutputTuple,
      StaticDynamic32DynamicEvent.OutputObject
    >;
    StaticDynamic32Dynamic: TypedContractEvent<
      StaticDynamic32DynamicEvent.InputTuple,
      StaticDynamic32DynamicEvent.OutputTuple,
      StaticDynamic32DynamicEvent.OutputObject
    >;

    "StaticDynamicDynamic32(address,bytes,uint32[])": TypedContractEvent<
      StaticDynamicDynamic32Event.InputTuple,
      StaticDynamicDynamic32Event.OutputTuple,
      StaticDynamicDynamic32Event.OutputObject
    >;
    StaticDynamicDynamic32: TypedContractEvent<
      StaticDynamicDynamic32Event.InputTuple,
      StaticDynamicDynamic32Event.OutputTuple,
      StaticDynamicDynamic32Event.OutputObject
    >;

    "UnsupportedFixedSizeAndDynamic(bool[2],string)": TypedContractEvent<
      UnsupportedFixedSizeAndDynamicEvent.InputTuple,
      UnsupportedFixedSizeAndDynamicEvent.OutputTuple,
      UnsupportedFixedSizeAndDynamicEvent.OutputObject
    >;
    UnsupportedFixedSizeAndDynamic: TypedContractEvent<
      UnsupportedFixedSizeAndDynamicEvent.InputTuple,
      UnsupportedFixedSizeAndDynamicEvent.OutputTuple,
      UnsupportedFixedSizeAndDynamicEvent.OutputObject
    >;
  };
}
