/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  Addressable,
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface TestContractInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "doEvenLess"
      | "doNothing"
      | "dynamic"
      | "dynamic32"
      | "dynamicDynamic32"
      | "emitTheSender"
      | "fnThatReverts"
      | "fnWithSingleParam"
      | "fnWithThreeParams"
      | "fnWithTwoMixedParams"
      | "fnWithTwoParams"
      | "mint"
      | "receiveEthAndDoNothing"
      | "testDynamic"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "DoEvenLess"
      | "DoNothing"
      | "Dynamic"
      | "Dynamic32"
      | "DynamicDynamic32"
      | "EmitTheSender"
      | "FnWithSingleParam"
      | "FnWithThreeParams"
      | "FnWithTwoMixedParams"
      | "FnWithTwoParams"
      | "Mint"
      | "Receive"
      | "ReceiveEthAndDoNothing"
      | "ReceiveFallback"
      | "TestDynamic"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "doEvenLess",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "doNothing", values?: undefined): string;
  encodeFunctionData(functionFragment: "dynamic", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "dynamic32",
    values: [BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "dynamicDynamic32",
    values: [string, BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "emitTheSender",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "fnThatReverts",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "fnWithSingleParam",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "fnWithThreeParams",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "fnWithTwoMixedParams",
    values: [boolean, string]
  ): string;
  encodeFunctionData(
    functionFragment: "fnWithTwoParams",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "mint",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "receiveEthAndDoNothing",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "testDynamic",
    values: [
      string,
      BigNumberish,
      string,
      boolean,
      BigNumberish,
      string,
      string
    ]
  ): string;

  decodeFunctionResult(functionFragment: "doEvenLess", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "doNothing", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "dynamic", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "dynamic32", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "dynamicDynamic32",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emitTheSender",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fnThatReverts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fnWithSingleParam",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fnWithThreeParams",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fnWithTwoMixedParams",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fnWithTwoParams",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mint", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "receiveEthAndDoNothing",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testDynamic",
    data: BytesLike
  ): Result;
}

export namespace DoEvenLessEvent {
  export type InputTuple = [];
  export type OutputTuple = [];
  export interface OutputObject {}
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DoNothingEvent {
  export type InputTuple = [];
  export type OutputTuple = [];
  export interface OutputObject {}
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DynamicEvent {
  export type InputTuple = [arg0: BytesLike];
  export type OutputTuple = [arg0: string];
  export interface OutputObject {
    arg0: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace Dynamic32Event {
  export type InputTuple = [arg0: BytesLike[]];
  export type OutputTuple = [arg0: string[]];
  export interface OutputObject {
    arg0: string[];
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DynamicDynamic32Event {
  export type InputTuple = [arg0: string, arg1: BytesLike[]];
  export type OutputTuple = [arg0: string, arg1: string[]];
  export interface OutputObject {
    arg0: string;
    arg1: string[];
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace EmitTheSenderEvent {
  export type InputTuple = [arg0: AddressLike];
  export type OutputTuple = [arg0: string];
  export interface OutputObject {
    arg0: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FnWithSingleParamEvent {
  export type InputTuple = [arg0: BigNumberish];
  export type OutputTuple = [arg0: bigint];
  export interface OutputObject {
    arg0: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FnWithThreeParamsEvent {
  export type InputTuple = [
    arg0: BigNumberish,
    arg1: BigNumberish,
    arg2: BigNumberish
  ];
  export type OutputTuple = [arg0: bigint, arg1: bigint, arg2: bigint];
  export interface OutputObject {
    arg0: bigint;
    arg1: bigint;
    arg2: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FnWithTwoMixedParamsEvent {
  export type InputTuple = [arg0: boolean, arg1: string];
  export type OutputTuple = [arg0: boolean, arg1: string];
  export interface OutputObject {
    arg0: boolean;
    arg1: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FnWithTwoParamsEvent {
  export type InputTuple = [arg0: BigNumberish, arg1: BigNumberish];
  export type OutputTuple = [arg0: bigint, arg1: bigint];
  export interface OutputObject {
    arg0: bigint;
    arg1: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MintEvent {
  export type InputTuple = [to: AddressLike, amount: BigNumberish];
  export type OutputTuple = [to: string, amount: bigint];
  export interface OutputObject {
    to: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ReceiveEvent {
  export type InputTuple = [];
  export type OutputTuple = [];
  export interface OutputObject {}
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ReceiveEthAndDoNothingEvent {
  export type InputTuple = [amount: BigNumberish];
  export type OutputTuple = [amount: bigint];
  export interface OutputObject {
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ReceiveFallbackEvent {
  export type InputTuple = [amount: BigNumberish];
  export type OutputTuple = [amount: bigint];
  export interface OutputObject {
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TestDynamicEvent {
  export type InputTuple = [
    test: string,
    test2: BigNumberish,
    test3: string,
    test4: boolean,
    test5: BigNumberish,
    test6: string,
    test7: string
  ];
  export type OutputTuple = [
    test: string,
    test2: bigint,
    test3: string,
    test4: boolean,
    test5: bigint,
    test6: string,
    test7: string
  ];
  export interface OutputObject {
    test: string;
    test2: bigint;
    test3: string;
    test4: boolean;
    test5: bigint;
    test6: string;
    test7: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface TestContract extends BaseContract {
  connect(runner?: ContractRunner | null): TestContract;
  attach(target: string | Addressable): TestContract;
  waitForDeployment(): Promise<this>;

  interface: TestContractInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  doEvenLess: TypedContractMethod<[], [void], "nonpayable">;

  doNothing: TypedContractMethod<[], [void], "nonpayable">;

  dynamic: TypedContractMethod<[first: BytesLike], [void], "nonpayable">;

  dynamic32: TypedContractMethod<[first: BytesLike[]], [void], "nonpayable">;

  dynamicDynamic32: TypedContractMethod<
    [first: string, second: BytesLike[]],
    [void],
    "nonpayable"
  >;

  emitTheSender: TypedContractMethod<[], [void], "nonpayable">;

  fnThatReverts: TypedContractMethod<[], [void], "view">;

  fnWithSingleParam: TypedContractMethod<
    [p: BigNumberish],
    [void],
    "nonpayable"
  >;

  fnWithThreeParams: TypedContractMethod<
    [a: BigNumberish, b: BigNumberish, c: BigNumberish],
    [void],
    "nonpayable"
  >;

  fnWithTwoMixedParams: TypedContractMethod<
    [a: boolean, s: string],
    [void],
    "nonpayable"
  >;

  fnWithTwoParams: TypedContractMethod<
    [a: BigNumberish, b: BigNumberish],
    [void],
    "nonpayable"
  >;

  mint: TypedContractMethod<
    [to: AddressLike, amount: BigNumberish],
    [bigint],
    "nonpayable"
  >;

  receiveEthAndDoNothing: TypedContractMethod<[], [void], "payable">;

  testDynamic: TypedContractMethod<
    [
      test: string,
      test2: BigNumberish,
      test3: string,
      test4: boolean,
      test5: BigNumberish,
      test6: string,
      test7: string
    ],
    [boolean],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "doEvenLess"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "doNothing"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "dynamic"
  ): TypedContractMethod<[first: BytesLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "dynamic32"
  ): TypedContractMethod<[first: BytesLike[]], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "dynamicDynamic32"
  ): TypedContractMethod<
    [first: string, second: BytesLike[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "emitTheSender"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "fnThatReverts"
  ): TypedContractMethod<[], [void], "view">;
  getFunction(
    nameOrSignature: "fnWithSingleParam"
  ): TypedContractMethod<[p: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "fnWithThreeParams"
  ): TypedContractMethod<
    [a: BigNumberish, b: BigNumberish, c: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "fnWithTwoMixedParams"
  ): TypedContractMethod<[a: boolean, s: string], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "fnWithTwoParams"
  ): TypedContractMethod<
    [a: BigNumberish, b: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "mint"
  ): TypedContractMethod<
    [to: AddressLike, amount: BigNumberish],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "receiveEthAndDoNothing"
  ): TypedContractMethod<[], [void], "payable">;
  getFunction(
    nameOrSignature: "testDynamic"
  ): TypedContractMethod<
    [
      test: string,
      test2: BigNumberish,
      test3: string,
      test4: boolean,
      test5: BigNumberish,
      test6: string,
      test7: string
    ],
    [boolean],
    "nonpayable"
  >;

  getEvent(
    key: "DoEvenLess"
  ): TypedContractEvent<
    DoEvenLessEvent.InputTuple,
    DoEvenLessEvent.OutputTuple,
    DoEvenLessEvent.OutputObject
  >;
  getEvent(
    key: "DoNothing"
  ): TypedContractEvent<
    DoNothingEvent.InputTuple,
    DoNothingEvent.OutputTuple,
    DoNothingEvent.OutputObject
  >;
  getEvent(
    key: "Dynamic"
  ): TypedContractEvent<
    DynamicEvent.InputTuple,
    DynamicEvent.OutputTuple,
    DynamicEvent.OutputObject
  >;
  getEvent(
    key: "Dynamic32"
  ): TypedContractEvent<
    Dynamic32Event.InputTuple,
    Dynamic32Event.OutputTuple,
    Dynamic32Event.OutputObject
  >;
  getEvent(
    key: "DynamicDynamic32"
  ): TypedContractEvent<
    DynamicDynamic32Event.InputTuple,
    DynamicDynamic32Event.OutputTuple,
    DynamicDynamic32Event.OutputObject
  >;
  getEvent(
    key: "EmitTheSender"
  ): TypedContractEvent<
    EmitTheSenderEvent.InputTuple,
    EmitTheSenderEvent.OutputTuple,
    EmitTheSenderEvent.OutputObject
  >;
  getEvent(
    key: "FnWithSingleParam"
  ): TypedContractEvent<
    FnWithSingleParamEvent.InputTuple,
    FnWithSingleParamEvent.OutputTuple,
    FnWithSingleParamEvent.OutputObject
  >;
  getEvent(
    key: "FnWithThreeParams"
  ): TypedContractEvent<
    FnWithThreeParamsEvent.InputTuple,
    FnWithThreeParamsEvent.OutputTuple,
    FnWithThreeParamsEvent.OutputObject
  >;
  getEvent(
    key: "FnWithTwoMixedParams"
  ): TypedContractEvent<
    FnWithTwoMixedParamsEvent.InputTuple,
    FnWithTwoMixedParamsEvent.OutputTuple,
    FnWithTwoMixedParamsEvent.OutputObject
  >;
  getEvent(
    key: "FnWithTwoParams"
  ): TypedContractEvent<
    FnWithTwoParamsEvent.InputTuple,
    FnWithTwoParamsEvent.OutputTuple,
    FnWithTwoParamsEvent.OutputObject
  >;
  getEvent(
    key: "Mint"
  ): TypedContractEvent<
    MintEvent.InputTuple,
    MintEvent.OutputTuple,
    MintEvent.OutputObject
  >;
  getEvent(
    key: "Receive"
  ): TypedContractEvent<
    ReceiveEvent.InputTuple,
    ReceiveEvent.OutputTuple,
    ReceiveEvent.OutputObject
  >;
  getEvent(
    key: "ReceiveEthAndDoNothing"
  ): TypedContractEvent<
    ReceiveEthAndDoNothingEvent.InputTuple,
    ReceiveEthAndDoNothingEvent.OutputTuple,
    ReceiveEthAndDoNothingEvent.OutputObject
  >;
  getEvent(
    key: "ReceiveFallback"
  ): TypedContractEvent<
    ReceiveFallbackEvent.InputTuple,
    ReceiveFallbackEvent.OutputTuple,
    ReceiveFallbackEvent.OutputObject
  >;
  getEvent(
    key: "TestDynamic"
  ): TypedContractEvent<
    TestDynamicEvent.InputTuple,
    TestDynamicEvent.OutputTuple,
    TestDynamicEvent.OutputObject
  >;

  filters: {
    "DoEvenLess()": TypedContractEvent<
      DoEvenLessEvent.InputTuple,
      DoEvenLessEvent.OutputTuple,
      DoEvenLessEvent.OutputObject
    >;
    DoEvenLess: TypedContractEvent<
      DoEvenLessEvent.InputTuple,
      DoEvenLessEvent.OutputTuple,
      DoEvenLessEvent.OutputObject
    >;

    "DoNothing()": TypedContractEvent<
      DoNothingEvent.InputTuple,
      DoNothingEvent.OutputTuple,
      DoNothingEvent.OutputObject
    >;
    DoNothing: TypedContractEvent<
      DoNothingEvent.InputTuple,
      DoNothingEvent.OutputTuple,
      DoNothingEvent.OutputObject
    >;

    "Dynamic(bytes)": TypedContractEvent<
      DynamicEvent.InputTuple,
      DynamicEvent.OutputTuple,
      DynamicEvent.OutputObject
    >;
    Dynamic: TypedContractEvent<
      DynamicEvent.InputTuple,
      DynamicEvent.OutputTuple,
      DynamicEvent.OutputObject
    >;

    "Dynamic32(bytes8[])": TypedContractEvent<
      Dynamic32Event.InputTuple,
      Dynamic32Event.OutputTuple,
      Dynamic32Event.OutputObject
    >;
    Dynamic32: TypedContractEvent<
      Dynamic32Event.InputTuple,
      Dynamic32Event.OutputTuple,
      Dynamic32Event.OutputObject
    >;

    "DynamicDynamic32(string,bytes2[])": TypedContractEvent<
      DynamicDynamic32Event.InputTuple,
      DynamicDynamic32Event.OutputTuple,
      DynamicDynamic32Event.OutputObject
    >;
    DynamicDynamic32: TypedContractEvent<
      DynamicDynamic32Event.InputTuple,
      DynamicDynamic32Event.OutputTuple,
      DynamicDynamic32Event.OutputObject
    >;

    "EmitTheSender(address)": TypedContractEvent<
      EmitTheSenderEvent.InputTuple,
      EmitTheSenderEvent.OutputTuple,
      EmitTheSenderEvent.OutputObject
    >;
    EmitTheSender: TypedContractEvent<
      EmitTheSenderEvent.InputTuple,
      EmitTheSenderEvent.OutputTuple,
      EmitTheSenderEvent.OutputObject
    >;

    "FnWithSingleParam(uint256)": TypedContractEvent<
      FnWithSingleParamEvent.InputTuple,
      FnWithSingleParamEvent.OutputTuple,
      FnWithSingleParamEvent.OutputObject
    >;
    FnWithSingleParam: TypedContractEvent<
      FnWithSingleParamEvent.InputTuple,
      FnWithSingleParamEvent.OutputTuple,
      FnWithSingleParamEvent.OutputObject
    >;

    "FnWithThreeParams(uint256,uint256,uint256)": TypedContractEvent<
      FnWithThreeParamsEvent.InputTuple,
      FnWithThreeParamsEvent.OutputTuple,
      FnWithThreeParamsEvent.OutputObject
    >;
    FnWithThreeParams: TypedContractEvent<
      FnWithThreeParamsEvent.InputTuple,
      FnWithThreeParamsEvent.OutputTuple,
      FnWithThreeParamsEvent.OutputObject
    >;

    "FnWithTwoMixedParams(bool,string)": TypedContractEvent<
      FnWithTwoMixedParamsEvent.InputTuple,
      FnWithTwoMixedParamsEvent.OutputTuple,
      FnWithTwoMixedParamsEvent.OutputObject
    >;
    FnWithTwoMixedParams: TypedContractEvent<
      FnWithTwoMixedParamsEvent.InputTuple,
      FnWithTwoMixedParamsEvent.OutputTuple,
      FnWithTwoMixedParamsEvent.OutputObject
    >;

    "FnWithTwoParams(uint256,uint256)": TypedContractEvent<
      FnWithTwoParamsEvent.InputTuple,
      FnWithTwoParamsEvent.OutputTuple,
      FnWithTwoParamsEvent.OutputObject
    >;
    FnWithTwoParams: TypedContractEvent<
      FnWithTwoParamsEvent.InputTuple,
      FnWithTwoParamsEvent.OutputTuple,
      FnWithTwoParamsEvent.OutputObject
    >;

    "Mint(address,uint256)": TypedContractEvent<
      MintEvent.InputTuple,
      MintEvent.OutputTuple,
      MintEvent.OutputObject
    >;
    Mint: TypedContractEvent<
      MintEvent.InputTuple,
      MintEvent.OutputTuple,
      MintEvent.OutputObject
    >;

    "Receive()": TypedContractEvent<
      ReceiveEvent.InputTuple,
      ReceiveEvent.OutputTuple,
      ReceiveEvent.OutputObject
    >;
    Receive: TypedContractEvent<
      ReceiveEvent.InputTuple,
      ReceiveEvent.OutputTuple,
      ReceiveEvent.OutputObject
    >;

    "ReceiveEthAndDoNothing(uint256)": TypedContractEvent<
      ReceiveEthAndDoNothingEvent.InputTuple,
      ReceiveEthAndDoNothingEvent.OutputTuple,
      ReceiveEthAndDoNothingEvent.OutputObject
    >;
    ReceiveEthAndDoNothing: TypedContractEvent<
      ReceiveEthAndDoNothingEvent.InputTuple,
      ReceiveEthAndDoNothingEvent.OutputTuple,
      ReceiveEthAndDoNothingEvent.OutputObject
    >;

    "ReceiveFallback(uint256)": TypedContractEvent<
      ReceiveFallbackEvent.InputTuple,
      ReceiveFallbackEvent.OutputTuple,
      ReceiveFallbackEvent.OutputObject
    >;
    ReceiveFallback: TypedContractEvent<
      ReceiveFallbackEvent.InputTuple,
      ReceiveFallbackEvent.OutputTuple,
      ReceiveFallbackEvent.OutputObject
    >;

    "TestDynamic(string,uint256,string,bool,uint8,string,string)": TypedContractEvent<
      TestDynamicEvent.InputTuple,
      TestDynamicEvent.OutputTuple,
      TestDynamicEvent.OutputObject
    >;
    TestDynamic: TypedContractEvent<
      TestDynamicEvent.InputTuple,
      TestDynamicEvent.OutputTuple,
      TestDynamicEvent.OutputObject
    >;
  };
}
