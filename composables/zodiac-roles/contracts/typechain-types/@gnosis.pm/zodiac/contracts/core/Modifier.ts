/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  Addressable,
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../../common";

export interface ModifierInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "avatar"
      | "disableModule"
      | "enableModule"
      | "execTransactionFromModule"
      | "execTransactionFromModuleReturnData"
      | "getGuard"
      | "getModulesPaginated"
      | "guard"
      | "isModuleEnabled"
      | "owner"
      | "renounceOwnership"
      | "setAvatar"
      | "setGuard"
      | "setTarget"
      | "setUp"
      | "target"
      | "transferOwnership"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "AvatarSet"
      | "ChangedGuard"
      | "DisabledModule"
      | "EnabledModule"
      | "OwnershipTransferred"
      | "TargetSet"
  ): EventFragment;

  encodeFunctionData(functionFragment: "avatar", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "disableModule",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "enableModule",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "execTransactionFromModule",
    values: [AddressLike, BigNumberish, BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "execTransactionFromModuleReturnData",
    values: [AddressLike, BigNumberish, BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "getGuard", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getModulesPaginated",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "guard", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "isModuleEnabled",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setAvatar",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setGuard",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setTarget",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "setUp", values: [BytesLike]): string;
  encodeFunctionData(functionFragment: "target", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(functionFragment: "avatar", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "disableModule",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "enableModule",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "execTransactionFromModule",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "execTransactionFromModuleReturnData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getGuard", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getModulesPaginated",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "guard", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isModuleEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setAvatar", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setGuard", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setTarget", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setUp", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "target", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
}

export namespace AvatarSetEvent {
  export type InputTuple = [
    previousAvatar: AddressLike,
    newAvatar: AddressLike
  ];
  export type OutputTuple = [previousAvatar: string, newAvatar: string];
  export interface OutputObject {
    previousAvatar: string;
    newAvatar: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ChangedGuardEvent {
  export type InputTuple = [guard: AddressLike];
  export type OutputTuple = [guard: string];
  export interface OutputObject {
    guard: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DisabledModuleEvent {
  export type InputTuple = [module: AddressLike];
  export type OutputTuple = [module: string];
  export interface OutputObject {
    module: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace EnabledModuleEvent {
  export type InputTuple = [module: AddressLike];
  export type OutputTuple = [module: string];
  export interface OutputObject {
    module: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TargetSetEvent {
  export type InputTuple = [
    previousTarget: AddressLike,
    newTarget: AddressLike
  ];
  export type OutputTuple = [previousTarget: string, newTarget: string];
  export interface OutputObject {
    previousTarget: string;
    newTarget: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface Modifier extends BaseContract {
  connect(runner?: ContractRunner | null): Modifier;
  attach(target: string | Addressable): Modifier;
  waitForDeployment(): Promise<this>;

  interface: ModifierInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  avatar: TypedContractMethod<[], [string], "view">;

  disableModule: TypedContractMethod<
    [prevModule: AddressLike, module: AddressLike],
    [void],
    "nonpayable"
  >;

  enableModule: TypedContractMethod<
    [module: AddressLike],
    [void],
    "nonpayable"
  >;

  execTransactionFromModule: TypedContractMethod<
    [
      to: AddressLike,
      value: BigNumberish,
      data: BytesLike,
      operation: BigNumberish
    ],
    [boolean],
    "nonpayable"
  >;

  execTransactionFromModuleReturnData: TypedContractMethod<
    [
      to: AddressLike,
      value: BigNumberish,
      data: BytesLike,
      operation: BigNumberish
    ],
    [[boolean, string] & { success: boolean; returnData: string }],
    "nonpayable"
  >;

  getGuard: TypedContractMethod<[], [string], "view">;

  getModulesPaginated: TypedContractMethod<
    [start: AddressLike, pageSize: BigNumberish],
    [[string[], string] & { array: string[]; next: string }],
    "view"
  >;

  guard: TypedContractMethod<[], [string], "view">;

  isModuleEnabled: TypedContractMethod<
    [_module: AddressLike],
    [boolean],
    "view"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  setAvatar: TypedContractMethod<[_avatar: AddressLike], [void], "nonpayable">;

  setGuard: TypedContractMethod<[_guard: AddressLike], [void], "nonpayable">;

  setTarget: TypedContractMethod<[_target: AddressLike], [void], "nonpayable">;

  setUp: TypedContractMethod<
    [initializeParams: BytesLike],
    [void],
    "nonpayable"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "avatar"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "disableModule"
  ): TypedContractMethod<
    [prevModule: AddressLike, module: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "enableModule"
  ): TypedContractMethod<[module: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "execTransactionFromModule"
  ): TypedContractMethod<
    [
      to: AddressLike,
      value: BigNumberish,
      data: BytesLike,
      operation: BigNumberish
    ],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "execTransactionFromModuleReturnData"
  ): TypedContractMethod<
    [
      to: AddressLike,
      value: BigNumberish,
      data: BytesLike,
      operation: BigNumberish
    ],
    [[boolean, string] & { success: boolean; returnData: string }],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getGuard"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getModulesPaginated"
  ): TypedContractMethod<
    [start: AddressLike, pageSize: BigNumberish],
    [[string[], string] & { array: string[]; next: string }],
    "view"
  >;
  getFunction(
    nameOrSignature: "guard"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "isModuleEnabled"
  ): TypedContractMethod<[_module: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setAvatar"
  ): TypedContractMethod<[_avatar: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setGuard"
  ): TypedContractMethod<[_guard: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setTarget"
  ): TypedContractMethod<[_target: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setUp"
  ): TypedContractMethod<[initializeParams: BytesLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "target"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;

  getEvent(
    key: "AvatarSet"
  ): TypedContractEvent<
    AvatarSetEvent.InputTuple,
    AvatarSetEvent.OutputTuple,
    AvatarSetEvent.OutputObject
  >;
  getEvent(
    key: "ChangedGuard"
  ): TypedContractEvent<
    ChangedGuardEvent.InputTuple,
    ChangedGuardEvent.OutputTuple,
    ChangedGuardEvent.OutputObject
  >;
  getEvent(
    key: "DisabledModule"
  ): TypedContractEvent<
    DisabledModuleEvent.InputTuple,
    DisabledModuleEvent.OutputTuple,
    DisabledModuleEvent.OutputObject
  >;
  getEvent(
    key: "EnabledModule"
  ): TypedContractEvent<
    EnabledModuleEvent.InputTuple,
    EnabledModuleEvent.OutputTuple,
    EnabledModuleEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "TargetSet"
  ): TypedContractEvent<
    TargetSetEvent.InputTuple,
    TargetSetEvent.OutputTuple,
    TargetSetEvent.OutputObject
  >;

  filters: {
    "AvatarSet(address,address)": TypedContractEvent<
      AvatarSetEvent.InputTuple,
      AvatarSetEvent.OutputTuple,
      AvatarSetEvent.OutputObject
    >;
    AvatarSet: TypedContractEvent<
      AvatarSetEvent.InputTuple,
      AvatarSetEvent.OutputTuple,
      AvatarSetEvent.OutputObject
    >;

    "ChangedGuard(address)": TypedContractEvent<
      ChangedGuardEvent.InputTuple,
      ChangedGuardEvent.OutputTuple,
      ChangedGuardEvent.OutputObject
    >;
    ChangedGuard: TypedContractEvent<
      ChangedGuardEvent.InputTuple,
      ChangedGuardEvent.OutputTuple,
      ChangedGuardEvent.OutputObject
    >;

    "DisabledModule(address)": TypedContractEvent<
      DisabledModuleEvent.InputTuple,
      DisabledModuleEvent.OutputTuple,
      DisabledModuleEvent.OutputObject
    >;
    DisabledModule: TypedContractEvent<
      DisabledModuleEvent.InputTuple,
      DisabledModuleEvent.OutputTuple,
      DisabledModuleEvent.OutputObject
    >;

    "EnabledModule(address)": TypedContractEvent<
      EnabledModuleEvent.InputTuple,
      EnabledModuleEvent.OutputTuple,
      EnabledModuleEvent.OutputObject
    >;
    EnabledModule: TypedContractEvent<
      EnabledModuleEvent.InputTuple,
      EnabledModuleEvent.OutputTuple,
      EnabledModuleEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "TargetSet(address,address)": TypedContractEvent<
      TargetSetEvent.InputTuple,
      TargetSetEvent.OutputTuple,
      TargetSetEvent.OutputObject
    >;
    TargetSet: TypedContractEvent<
      TargetSetEvent.InputTuple,
      TargetSetEvent.OutputTuple,
      TargetSetEvent.OutputObject
    >;
  };
}
