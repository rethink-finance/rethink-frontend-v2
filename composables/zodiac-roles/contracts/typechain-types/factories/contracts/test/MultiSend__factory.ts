/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../../common";
import type {
  MultiSend,
  MultiSendInterface,
} from "../../../contracts/test/MultiSend";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "transactions",
        type: "bytes",
      },
    ],
    name: "multiSend",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60a060405234801561001057600080fd5b503073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1660601b8152505060805160601c6103d66100656000396000604101526103d66000f3fe60806040526004361061001e5760003560e01c80638d80ff0a14610023575b600080fd5b61003d600480360381019061003891906101ca565b61003f565b005b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff1614156100ce576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016100c590610236565b60405180910390fd5b805160205b81811015610155578083015160f81c6001820184015160601c601583018501516035840186015160558501870160008560008114610118576001811461012857610133565b6000808585888a5af19150610133565b6000808585895af491505b50600081141561014257600080fd5b82605501870196505050505050506100d3565b505050565b600061016d6101688461027b565b610256565b90508281526020810184848401111561018957610188610331565b5b6101948482856102bd565b509392505050565b600082601f8301126101b1576101b061032c565b5b81356101c184826020860161015a565b91505092915050565b6000602082840312156101e0576101df61033b565b5b600082013567ffffffffffffffff8111156101fe576101fd610336565b5b61020a8482850161019c565b91505092915050565b60006102206030836102ac565b915061022b82610351565b604082019050919050565b6000602082019050818103600083015261024f81610213565b9050919050565b6000610260610271565b905061026c82826102cc565b919050565b6000604051905090565b600067ffffffffffffffff821115610296576102956102fd565b5b61029f82610340565b9050602081019050919050565b600082825260208201905092915050565b82818337600083830152505050565b6102d582610340565b810181811067ffffffffffffffff821117156102f4576102f36102fd565b5b80604052505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4d756c746953656e642073686f756c64206f6e6c792062652063616c6c65642060008201527f7669612064656c656761746563616c6c0000000000000000000000000000000060208201525056fea264697066735822122003b5199035b7ef8bdf66f5da6a3fb6fc6660fa3251345a2dffb6be21cef2a2cc64736f6c63430008060033";

type MultiSendConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MultiSendConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MultiSend__factory extends ContractFactory {
  constructor(...args: MultiSendConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      MultiSend & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): MultiSend__factory {
    return super.connect(runner) as MultiSend__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MultiSendInterface {
    return new Interface(_abi) as MultiSendInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): MultiSend {
    return new Contract(address, _abi, runner) as unknown as MultiSend;
  }
}
