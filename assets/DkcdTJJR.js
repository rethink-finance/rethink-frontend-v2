import{O as u,P as h}from"./D3HDfnxy.js";const g=u({id:"blockTimeStore",state:()=>({chainBlockTimeContext:{},initializingContexts:new Map}),getters:{web3Store(){return h()}},actions:{async initializeBlockTimeContext(e,c=!0){var r;const t=c?this.web3Store.getL2ToL1ChainId(e):e;if((r=this.chainBlockTimeContext[t])!=null&&r.currentBlock)return this.chainBlockTimeContext[t];if(this.initializingContexts.has(t))return this.initializingContexts.get(t);const i=(async()=>{const s=this.web3Store.getWeb3Instance(t,c);console.log("blockTime get latest block");const n=await this.web3Store.callWithRetry(t,()=>s.eth.getBlock("latest"),0,[],1e3);console.log("blockTime get previous block",n);const o=await this.web3Store.callWithRetry(t,()=>s.eth.getBlock(Number(n.number)-1e3),0,[],1e3);console.log("blockTime get blocks DONE",o);const a=Number(n.timestamp)-Number(o.timestamp),l=Number(n.number)-Number(o.number),b=a/l,m={currentBlock:Number(n.number),currentBlockTimestamp:Number(n.timestamp),chainId:t,averageBlockTime:b};return console.log("blockTime context",m),this.chainBlockTimeContext[t]=m,m})();this.initializingContexts.set(t,i);try{return await i}finally{this.initializingContexts.delete(t)}},async getTimestampForBlock(e,c){if(!c)throw new Error("BlockTimeContext not initialized");const{currentBlock:t,currentBlockTimestamp:i,averageBlockTime:r,chainId:s}=c;if(e<=t){const a=this.web3Store.getWeb3Instance(s);try{const l=await this.web3Store.callWithRetry(s,()=>a.eth.getBlock(e));return Number((l==null?void 0:l.timestamp)||0)}catch(l){return console.error(`Error fetching block ${e}:`,l),0}}const o=(e-t)*r;return i+o},async getBlockByTimestamp(e,c,t){try{const i=this.web3Store.chainProviders[e],r=Number(await this.web3Store.callWithRetry(e,()=>i.eth.getBlockNumber())),s=await this.web3Store.callWithRetry(e,()=>i.eth.getBlock(r)),n=Number(s.timestamp),o=r-Math.floor((n-c)/t);return o<0||o>r?(console.error("Invalid estimated start block",o,r),null):o}catch(i){return console.error("Error getting block by timestamp",i),null}}}});export{g as u};
